// <auto-generated />
using System;
using GiftApp.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GiftApp.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190606000616_asd")]
    partial class asd
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GiftApp.API.Models.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City");

                    b.Property<string>("MailingAddress");

                    b.Property<string>("State");

                    b.Property<int?>("ZipCode");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("GiftApp.API.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CommentText");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<int?>("EventId");

                    b.Property<bool>("IsActive");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("GiftApp.API.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AddressId");

                    b.Property<int?>("CreatedBy");

                    b.Property<DateTime?>("CreatedOn");

                    b.Property<DateTime>("DateTimeOfEvent");

                    b.Property<string>("EventName");

                    b.Property<string>("EventPlace");

                    b.Property<int?>("EventTypeId");

                    b.Property<DateTime>("GiftsAddBy");

                    b.Property<bool>("GiftsShuffled");

                    b.Property<bool>("IsActive");

                    b.Property<double>("MaxPrice");

                    b.Property<double>("MinPrice");

                    b.Property<int?>("ModifiedBy");

                    b.Property<DateTime?>("ModifiedOn");

                    b.Property<bool>("ParticipantsShuffled");

                    b.Property<DateTime>("RSVP");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("EventTypeId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("GiftApp.API.Models.EventOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Category");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("EventOptions");
                });

            modelBuilder.Entity("GiftApp.API.Models.EventOptionEvent", b =>
                {
                    b.Property<int>("EventOptionId");

                    b.Property<int>("EventId");

                    b.HasKey("EventOptionId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("EventOptionEvent");
                });

            modelBuilder.Entity("GiftApp.API.Models.EventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EventTypeName");

                    b.HasKey("Id");

                    b.ToTable("EventTypes");
                });

            modelBuilder.Entity("GiftApp.API.Models.Gift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GiftDescription");

                    b.Property<string>("GiftName");

                    b.Property<string>("GiftUrl");

                    b.Property<bool>("IsActive");

                    b.Property<double>("Price");

                    b.Property<int?>("ShuffleId");

                    b.Property<int?>("UserEventEventId");

                    b.Property<int?>("UserEventUserId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ShuffleId");

                    b.HasIndex("UserId");

                    b.HasIndex("UserEventUserId", "UserEventEventId");

                    b.ToTable("Gifts");
                });

            modelBuilder.Entity("GiftApp.API.Models.GiftStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName");

                    b.HasKey("Id");

                    b.ToTable("GiftStatuses");
                });

            modelBuilder.Entity("GiftApp.API.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("GiftApp.API.Models.Shuffle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("UserGiftForId");

                    b.HasKey("Id");

                    b.HasIndex("UserGiftForId");

                    b.ToTable("Shuffles");
                });

            modelBuilder.Entity("GiftApp.API.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<bool>("IsActive");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("GiftApp.API.Models.UserEvent", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("EventId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsConfirmed");

                    b.Property<bool>("Participats");

                    b.Property<int>("RoleId");

                    b.Property<int?>("ShuffleId");

                    b.HasKey("UserId", "EventId");

                    b.HasIndex("EventId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ShuffleId");

                    b.ToTable("UserEvent");
                });

            modelBuilder.Entity("GiftApp.API.Models.Comment", b =>
                {
                    b.HasOne("GiftApp.API.Models.Event")
                        .WithMany("Comments")
                        .HasForeignKey("EventId");

                    b.HasOne("GiftApp.API.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("GiftApp.API.Models.Event", b =>
                {
                    b.HasOne("GiftApp.API.Models.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId");

                    b.HasOne("GiftApp.API.Models.EventType", "EventType")
                        .WithMany()
                        .HasForeignKey("EventTypeId");
                });

            modelBuilder.Entity("GiftApp.API.Models.EventOptionEvent", b =>
                {
                    b.HasOne("GiftApp.API.Models.Event", "Event")
                        .WithMany("EventOptionEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GiftApp.API.Models.EventOption", "EventOption")
                        .WithMany("EventOptionEvents")
                        .HasForeignKey("EventOptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GiftApp.API.Models.Gift", b =>
                {
                    b.HasOne("GiftApp.API.Models.Shuffle")
                        .WithMany("Gifts")
                        .HasForeignKey("ShuffleId");

                    b.HasOne("GiftApp.API.Models.User")
                        .WithMany("WishListGifts")
                        .HasForeignKey("UserId");

                    b.HasOne("GiftApp.API.Models.UserEvent")
                        .WithMany("Gift")
                        .HasForeignKey("UserEventUserId", "UserEventEventId");
                });

            modelBuilder.Entity("GiftApp.API.Models.Shuffle", b =>
                {
                    b.HasOne("GiftApp.API.Models.User", "UserGiftFor")
                        .WithMany()
                        .HasForeignKey("UserGiftForId");
                });

            modelBuilder.Entity("GiftApp.API.Models.UserEvent", b =>
                {
                    b.HasOne("GiftApp.API.Models.Event", "Event")
                        .WithMany("UserEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GiftApp.API.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GiftApp.API.Models.Shuffle", "Shuffle")
                        .WithMany()
                        .HasForeignKey("ShuffleId");

                    b.HasOne("GiftApp.API.Models.User", "User")
                        .WithMany("UserEvents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
